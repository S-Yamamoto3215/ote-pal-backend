import { Entity, PrimaryGeneratedColumn, Column } from "typeorm";
import { validateSync, Length } from "class-validator";

// Associations Entity
// import { Family } from "@/domain/entities/Family";

import { AppError } from "@/infrastructure/errors/AppError";

@Entity()
export class {{ pascalCase name }} {
  @PrimaryGeneratedColumn()
  id?: number;

  // Entity Properties
  // @Column()
  // @IsNotEmpty({ message: "Name is required" })
  // @Length(1, 20, { message: "Name must be between 1 and 20" })
  // name: string;

  constructor(
    // name: string,
  ) {
    // this.name = name;
  }

  validate(): void {
    const errors = validateSync(this);
    if (errors.length > 0) {
      const validationMessages = errors
        .map((err) => Object.values(err.constraints!))
        .flat();
      throw new AppError("ValidationError", validationMessages.join(", "));
    }
  }

  getId(): number {
    if (this.id === undefined) {
      throw new AppError("ValidationError", "{{ pascalCase name }} id is undefined or null");
    }
    return this.id;
  }

  // getName(): string {
  //   return this.name;
  // }

  setId(id: number): void {
    if (this.id !== undefined) {
      throw new AppError("ValidationError", "{{ pascalCase name }} id is already set");
    }
    this.id = id;
  }

  // setName(name: string): void {
  //   this.name = name;
  // }
}
