import request from "supertest";
import express, { NextFunction, Request, Response } from "express";

import { {{ pascalCase name }}Controller } from "@/interface/controllers/{{ pascalCase name }}Controller";
import { I{{ pascalCase name }}UseCase } from "@/application/usecases/{{ pascalCase name }}UseCase";

import { {{ camelCase name }}Seeds } from "@tests/resources/{{ pascalCase name }}/{{ pascalCase name }}Seeds";

const mock{{ pascalCase name }}UseCase: I{{ pascalCase name }}UseCase = {
  get{{ pascalCase name }}ById: jest.fn(),
};

const app = express();
app.use(express.json());
const {{ camelCase name }}Controller = new {{ pascalCase name }}Controller(mock{{ pascalCase name }}UseCase);

app.get("/{{ camelCase name }}s/:{{ camelCase name }}Id", (req, res, next) =>
  {{ camelCase name }}Controller.get{{ pascalCase name }}ById(req, res, next)
);

describe("{{ pascalCase name }}Controller", () => {
  beforeEach(() => {
  jest.clearAllMocks();
});

it("should get {{ camelCase name }} by {{ camelCase name }}Id", async () => {
  const mock{{ pascalCase name }} = {{ camelCase name }}Seeds[0];
  (mock{{ pascalCase name }}UseCase.get{{ pascalCase name }}ById as jest.Mock).mockResolvedValue(mock{{ pascalCase name }});

  const response = await request(app).get("/{{ camelCase name }}s/1");

  expect(response.status).toBe(200);
  expect(response.body).toEqual(mock{{ pascalCase name }});
  expect(mock{{ pascalCase name }}UseCase.get{{ pascalCase name }}ById).toHaveBeenCalledWith(1);
});
