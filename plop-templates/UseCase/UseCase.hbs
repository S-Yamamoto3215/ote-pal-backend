import { {{ pascalCase name }} } from "@/domain/entities/{{ pascalCase name }}";

import { I{{ pascalCase name }}Repository } from "@/domain/repositories/{{ pascalCase name }}Repository";

import { I{{ pascalCase name }}UseCase } from "@/application/usecases/{{ pascalCase name }}UseCase";

import { AppError } from "@/infrastructure/errors/AppError";

export class {{ pascalCase name }}UseCase implements I{{ pascalCase name }}UseCase {
  constructor(private {{ camelCase name }}Repository: I{{ pascalCase name }}Repository) {}

  async get{{ pascalCase name }}ById({{ camelCase name }}Id: number): Promise<{{ pascalCase name }} | null> {
    try {
      const {{ camelCase name }} = await this.{{ camelCase name }}Repository.findById({{ camelCase name }}Id);
      if (!{{ camelCase name }}) {
        throw new AppError("NotFound", "{{ pascalCase name }} not found");
      }
      return {{ camelCase name }};
    } catch (error) {
      throw error;
    }
  }

  async findAllByFamilyId(familyId: number): Promise<{{ pascalCase name }}[]> {
    try {
      return this.{{ camelCase name }}Repository.findAllByFamilyId(familyId);
    } catch (error) {
      throw error;
    }
  }

  async create{{ pascalCase name }}(input: Create{{ pascalCase name }}Input): Promise<{{ pascalCase name }}> {
    try {
      const {{ camelCase name }} = new {{ pascalCase name }}(input);

      return this.{{ camelCase name }}Repository.save({{ camelCase name }});
    } catch (error) {
      throw error;
    }
  }

  async update{{ pascalCase name }}({{ camelCase name }}Id: number, input: Create{{ pascalCase name }}Input): Promise<{{ pascalCase name }}> {
    try {
      const {{ camelCase name }} = await this.{{ camelCase name }}Repository.findById({{ camelCase name }}Id);
      if (!{{ camelCase name }}) {
        throw new AppError("NotFound", "{{ pascalCase name }} not found");
      }

      // update process here

      return this.{{ camelCase name }}Repository.save({{ camelCase name }});
    } catch (error) {
      throw error;
    }
  }

  async delete{{ pascalCase name }}({{ camelCase name }}Id: number): Promise<void> {
    try {
      await this.{{ camelCase name }}Repository.delete({{ camelCase name }}Id);
    } catch (error) {
      throw error;
    }
  }
}
